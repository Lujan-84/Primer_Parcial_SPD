/* 
-------------------------CONSIGNA PRIMER PARCIAL -------------------------------------------
	Diseñar un contador de 0 a 99 utilizando dos displays de 7 segmentos y tres botones para
controlar la cuenta. Debes implementar la técnica de multiplexación para mostrar los dígitos
en los displays. El contador debe comenzar en 0 y debe ser capaz de aumentar o disminuir
su valor en una unidad con los botones.
--------------------------------------------------------------------------------------------
*/

#define B 13
#define A 12
#define F 11
#define G 10
#define E 9
#define D 8
#define C 7
#define BOTON_SUBE 6
#define BOTON_BAJA 5
#define BOTON_RESET 4
#define UNIDAD A4
#define DECENAS A5

#define APAGADOS 0
#define TIEMPO_DISPLAY_ON 10


void setup()
{
  
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(C, OUTPUT);
  pinMode(D, OUTPUT);
  pinMode(E, OUTPUT);
  pinMode(F, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(BOTON_SUBE,INPUT_PULLUP);
  pinMode(BOTON_BAJA, INPUT_PULLUP);
  pinMode(BOTON_RESET, INPUT_PULLUP);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENAS, OUTPUT);
  digitalWrite(UNIDAD, 0);
  digitalWrite(DECENAS, 0);
  encenderDigito(0);  
   
}

int contador = 0;
int sube_ahora = 1;
int sube_anterior = 1;
int baja_ahora = 1;
int baja_anterior = 1;
int reset_ahora = 1;
int reset_anterior = 1;

void loop()
{
    int presionado = keypresionada();
    if (presionado == BOTON_SUBE)
    {
      contador ++;
      if (contador > 99)
      {
        contador = 0;
      }
    }
  	else if (presionado == BOTON_BAJA)
    {
      contador --;
      if (contador < 0)
      {
        contador = 99;
      }
    }
  	else if (presionado == BOTON_RESET)
    {
      contador = 0;
    }
  
  imprimirCuenta(contador);
}

// Define los estados de los leds del display
void imprimirDigito(int n)
{
  apagarLeds();
  switch (n){
    case 0:
      encenderLeds(HIGH,HIGH,HIGH,HIGH,HIGH,HIGH,LOW);
    break;
    case 1:
      encenderLeds(LOW,HIGH,HIGH,LOW,LOW,LOW,LOW);
    break;
    case 2:
      encenderLeds(HIGH,HIGH,LOW,HIGH,HIGH,LOW,HIGH);
    break;
    case 3:
      encenderLeds(HIGH,HIGH,HIGH,HIGH,LOW,LOW,HIGH);
    break;
    case 4:
       encenderLeds(LOW,HIGH,HIGH,LOW,LOW,HIGH,HIGH);
    break;
    case 5:
      encenderLeds(HIGH,LOW,HIGH,HIGH,LOW,HIGH,HIGH);
    break;
    case 6:
      encenderLeds(LOW,LOW,HIGH,HIGH,HIGH,HIGH,HIGH);
    break;
    case 7:
      encenderLeds(HIGH,HIGH,HIGH,LOW,LOW,LOW,LOW);
    break;
    case 8:
      encenderLeds(HIGH,HIGH,HIGH,HIGH,HIGH,HIGH,HIGH);
    break;
    case 9:
      encenderLeds(HIGH,HIGH,HIGH,LOW,LOW,HIGH,HIGH);
    break;
  }	
}

// Apaga todos los leds del display
void apagarLeds()
{
  	digitalWrite(A, LOW);
    digitalWrite(B, LOW);
    digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, LOW);
    digitalWrite(F, LOW);
    digitalWrite(G, LOW);
}

// Enciende los leds del display según los estados que recibe
void encenderLeds(int estado_A,int estado_B,int estado_C,int estado_D,int estado_E,int estado_F,int estado_G)
{
    digitalWrite(A, estado_A);
    digitalWrite(B, estado_B);
    digitalWrite(C, estado_C);
    digitalWrite(D, estado_D);
    digitalWrite(E, estado_E);
    digitalWrite(F, estado_F);
    digitalWrite(G, estado_G);
}

//Ejecuta la multiplexación apagando un display y encendiendo el otro según deba mostrar Unidades o Decenas
void encenderDigito(int digito)
{
	if (digito == UNIDAD)
    {
      digitalWrite(UNIDAD,LOW);
      digitalWrite(DECENAS, HIGH);
      delay(TIEMPO_DISPLAY_ON);
    }
  	else if (digito == DECENAS)
    {
      digitalWrite(DECENAS,LOW);
      digitalWrite(UNIDAD, HIGH);
      delay(TIEMPO_DISPLAY_ON);
    }
  	else
    {
      digitalWrite(UNIDAD, HIGH);
      digitalWrite(DECENAS,HIGH); 
    }
}

//Controla la multiplexación, a partir del contador recibido determina la decena y la unidad a mostrar                  
void imprimirCuenta(int contador)
{
    encenderDigito(APAGADOS);
    imprimirDigito(contador/10);
    encenderDigito(DECENAS);
    encenderDigito(APAGADOS);
    imprimirDigito(contador - 10*((int)contador / 10));
    encenderDigito(UNIDAD);
}

//Determina cuándo se presiona un pulsador y cuándo es soltado
int keypresionada(void)
{
    sube_ahora = digitalRead(BOTON_SUBE);
    baja_ahora = digitalRead(BOTON_BAJA);
    reset_ahora = digitalRead(BOTON_RESET);

    if (sube_ahora)
    {
        sube_anterior = 1;
    }
    if (baja_ahora)
    {
        baja_anterior = 1;
    }
    if (reset_ahora)
    {
        reset_anterior = 1;
    }

    if (sube_ahora == 0 && sube_ahora != sube_anterior)
    {
        sube_anterior = sube_ahora;
        return BOTON_SUBE;
    }
    if (baja_ahora == 0 && baja_ahora != baja_anterior)
    {
        baja_anterior = baja_ahora;
        return BOTON_BAJA;
    }
    if (reset_ahora == 0 && reset_ahora != reset_anterior)
    {
        reset_anterior = reset_ahora;
        return BOTON_RESET;
    }
  return 0;
}                  

